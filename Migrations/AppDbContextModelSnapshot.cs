// <auto-generated />
using System;
using FlightSearch.API.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FlightSearch.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("FlightSearch.API.Data.Models.Flight", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Arrives")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Departs")
                        .HasColumnType("datetime2");

                    b.Property<string>("Destination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("ID");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Arrives = new DateTime(2014, 6, 23, 14, 40, 0, 0, DateTimeKind.Unspecified),
                            Departs = new DateTime(2014, 6, 23, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            Destination = "LAX",
                            Origin = "LAS",
                            Price = 151.00m
                        },
                        new
                        {
                            ID = 2,
                            Arrives = new DateTime(2014, 6, 15, 8, 54, 0, 0, DateTimeKind.Unspecified),
                            Departs = new DateTime(2014, 6, 15, 6, 45, 0, 0, DateTimeKind.Unspecified),
                            Destination = "YYC",
                            Origin = "YYZ",
                            Price = 578.00m
                        },
                        new
                        {
                            ID = 3,
                            Arrives = new DateTime(2014, 6, 23, 21, 45, 0, 0, DateTimeKind.Unspecified),
                            Departs = new DateTime(2014, 6, 23, 19, 40, 0, 0, DateTimeKind.Unspecified),
                            Destination = "ORD",
                            Origin = "MIA",
                            Price = 532.00m
                        },
                        new
                        {
                            ID = 4,
                            Arrives = new DateTime(2014, 6, 12, 11, 24, 0, 0, DateTimeKind.Unspecified),
                            Departs = new DateTime(2014, 6, 12, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "YVR",
                            Origin = "YYC",
                            Price = 379.00m
                        },
                        new
                        {
                            ID = 5,
                            Arrives = new DateTime(2014, 6, 21, 17, 6, 0, 0, DateTimeKind.Unspecified),
                            Departs = new DateTime(2014, 6, 21, 11, 5, 0, 0, DateTimeKind.Unspecified),
                            Destination = "BOS",
                            Origin = "LHR",
                            Price = 975.00m
                        },
                        new
                        {
                            ID = 6,
                            Arrives = new DateTime(2014, 6, 18, 19, 47, 0, 0, DateTimeKind.Unspecified),
                            Departs = new DateTime(2014, 6, 18, 9, 10, 0, 0, DateTimeKind.Unspecified),
                            Destination = "YYZ",
                            Origin = "YVR",
                            Price = 1093.00m
                        },
                        new
                        {
                            ID = 7,
                            Arrives = new DateTime(2014, 6, 19, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            Departs = new DateTime(2014, 6, 19, 8, 45, 0, 0, DateTimeKind.Unspecified),
                            Destination = "YYC",
                            Origin = "LAX",
                            Price = 356.00m
                        },
                        new
                        {
                            ID = 8,
                            Arrives = new DateTime(2014, 6, 20, 12, 36, 0, 0, DateTimeKind.Unspecified),
                            Departs = new DateTime(2014, 6, 20, 7, 45, 0, 0, DateTimeKind.Unspecified),
                            Destination = "ORD",
                            Origin = "MIA",
                            Price = 422.00m
                        },
                        new
                        {
                            ID = 9,
                            Arrives = new DateTime(2014, 6, 21, 23, 23, 0, 0, DateTimeKind.Unspecified),
                            Departs = new DateTime(2014, 6, 21, 17, 55, 0, 0, DateTimeKind.Unspecified),
                            Destination = "YEG",
                            Origin = "JFK",
                            Price = 589.00m
                        },
                        new
                        {
                            ID = 10,
                            Arrives = new DateTime(2014, 6, 22, 21, 20, 0, 0, DateTimeKind.Unspecified),
                            Departs = new DateTime(2014, 6, 22, 9, 45, 0, 0, DateTimeKind.Unspecified),
                            Destination = "YYZ",
                            Origin = "LAS",
                            Price = 549.00m
                        },
                        new
                        {
                            ID = 11,
                            Arrives = new DateTime(2014, 6, 23, 15, 22, 0, 0, DateTimeKind.Unspecified),
                            Departs = new DateTime(2014, 6, 23, 9, 20, 0, 0, DateTimeKind.Unspecified),
                            Destination = "YYZ",
                            Origin = "YVR",
                            Price = 1122.00m
                        },
                        new
                        {
                            ID = 12,
                            Arrives = new DateTime(2014, 6, 19, 10, 58, 0, 0, DateTimeKind.Unspecified),
                            Departs = new DateTime(2014, 6, 19, 5, 55, 0, 0, DateTimeKind.Unspecified),
                            Destination = "YUL",
                            Origin = "MSY",
                            Price = 480.00m
                        },
                        new
                        {
                            ID = 13,
                            Arrives = new DateTime(2014, 6, 26, 14, 9, 0, 0, DateTimeKind.Unspecified),
                            Departs = new DateTime(2014, 6, 26, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "YYC",
                            Origin = "YYZ",
                            Price = 630.00m
                        },
                        new
                        {
                            ID = 14,
                            Arrives = new DateTime(2014, 6, 19, 17, 45, 0, 0, DateTimeKind.Unspecified),
                            Departs = new DateTime(2014, 6, 19, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "YYC",
                            Origin = "LAX",
                            Price = 543.00m
                        },
                        new
                        {
                            ID = 15,
                            Arrives = new DateTime(2014, 6, 23, 14, 54, 0, 0, DateTimeKind.Unspecified),
                            Departs = new DateTime(2014, 6, 23, 12, 40, 0, 0, DateTimeKind.Unspecified),
                            Destination = "YYZ",
                            Origin = "YYC",
                            Price = 541.00m
                        },
                        new
                        {
                            ID = 16,
                            Arrives = new DateTime(2014, 6, 23, 21, 45, 0, 0, DateTimeKind.Unspecified),
                            Departs = new DateTime(2014, 6, 23, 19, 40, 0, 0, DateTimeKind.Unspecified),
                            Destination = "ORD",
                            Origin = "MIA",
                            Price = 532.00m
                        },
                        new
                        {
                            ID = 17,
                            Arrives = new DateTime(2014, 6, 24, 2, 22, 0, 0, DateTimeKind.Unspecified),
                            Departs = new DateTime(2014, 6, 23, 22, 10, 0, 0, DateTimeKind.Unspecified),
                            Destination = "YYZ",
                            Origin = "YVR",
                            Price = 1151.00m
                        },
                        new
                        {
                            ID = 18,
                            Arrives = new DateTime(2014, 6, 16, 19, 28, 0, 0, DateTimeKind.Unspecified),
                            Departs = new DateTime(2014, 6, 16, 8, 11, 0, 0, DateTimeKind.Unspecified),
                            Destination = "YYZ",
                            Origin = "LAS",
                            Price = 703.00m
                        },
                        new
                        {
                            ID = 19,
                            Arrives = new DateTime(2014, 6, 21, 15, 10, 0, 0, DateTimeKind.Unspecified),
                            Departs = new DateTime(2014, 6, 21, 8, 55, 0, 0, DateTimeKind.Unspecified),
                            Destination = "YYC",
                            Origin = "LAX",
                            Price = 577.00m
                        },
                        new
                        {
                            ID = 20,
                            Arrives = new DateTime(2014, 6, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Departs = new DateTime(2014, 6, 15, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "YVR",
                            Origin = "YYZ",
                            Price = 647.00m
                        },
                        new
                        {
                            ID = 21,
                            Arrives = new DateTime(2014, 6, 19, 12, 42, 0, 0, DateTimeKind.Unspecified),
                            Departs = new DateTime(2014, 6, 19, 6, 30, 0, 0, DateTimeKind.Unspecified),
                            Destination = "BOS",
                            Origin = "LHR",
                            Price = 1243.00m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "49f73cd8-2767-4dfb-bb4c-4604bff1b83b",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAENE3qyyE1DNg0S/H9gHBhgCRGjKBBlh7VxO6VK9p6P4ZloMi+vHPUoLI6BMAeLcntA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "92ca7992-9e82-4860-8c7a-1ead52c59740",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
